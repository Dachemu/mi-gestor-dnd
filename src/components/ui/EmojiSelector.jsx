import React, { useState, useRef, useEffect } from 'react'

// Categor√≠as de emojis SIN duplicados - cada emoji aparece solo en UNA categor√≠a
const EMOJI_CATEGORIES = {
  personas: {
    name: 'Personas',
    emojis: [
      'üßô', 'üßô‚Äç‚ôÄÔ∏è', 'üßô‚Äç‚ôÇÔ∏è', 'ü§¥', 'üë∏', 'üßù', 'üßù‚Äç‚ôÄÔ∏è', 'üßù‚Äç‚ôÇÔ∏è', 
      'üßõ', 'üßõ‚Äç‚ôÄÔ∏è', 'üßõ‚Äç‚ôÇÔ∏è', 'üßö', 'üßö‚Äç‚ôÄÔ∏è', 'üßö‚Äç‚ôÇÔ∏è', 'üßû', 'üßû‚Äç‚ôÄÔ∏è', 'üßû‚Äç‚ôÇÔ∏è',
      'üßü', 'üßü‚Äç‚ôÄÔ∏è', 'üßü‚Äç‚ôÇÔ∏è', 'ü¶∏', 'ü¶∏‚Äç‚ôÄÔ∏è', 'ü¶∏‚Äç‚ôÇÔ∏è', 'ü¶π', 'ü¶π‚Äç‚ôÄÔ∏è', 'ü¶π‚Äç‚ôÇÔ∏è',
      'ü§∫', 'ü•∑', 'üíÇ', 'üíÇ‚Äç‚ôÄÔ∏è', 'üíÇ‚Äç‚ôÇÔ∏è', 'üë∑', 'üë∑‚Äç‚ôÄÔ∏è', 'üë∑‚Äç‚ôÇÔ∏è',
      'üïµÔ∏è', 'üïµÔ∏è‚Äç‚ôÄÔ∏è', 'üïµÔ∏è‚Äç‚ôÇÔ∏è', 'üë®‚Äç‚öïÔ∏è', 'üë©‚Äç‚öïÔ∏è', 'üßë‚Äç‚öïÔ∏è', 'üë®‚Äçüåæ', 'üë©‚Äçüåæ', 'üßë‚Äçüåæ',
      'üë®‚Äçüç≥', 'üë©‚Äçüç≥', 'üßë‚Äçüç≥', 'üë®‚Äçüè´', 'üë©‚Äçüè´', 'üßë‚Äçüè´', 'üë®‚Äç‚öñÔ∏è', 'üë©‚Äç‚öñÔ∏è', 'üßë‚Äç‚öñÔ∏è',
      'üßî', 'üßî‚Äç‚ôÄÔ∏è', 'üßî‚Äç‚ôÇÔ∏è', 'üë≤', 'üë≥', 'üë≥‚Äç‚ôÄÔ∏è', 'üë≥‚Äç‚ôÇÔ∏è', 'üßï',
      'üëÆ', 'üëÆ‚Äç‚ôÄÔ∏è', 'üëÆ‚Äç‚ôÇÔ∏è', 'üë¥', 'üëµ', 'üßì', 'üë∂', 'üëß', 'üßí', 'üë¶',
      'üë±', 'üë±‚Äç‚ôÄÔ∏è', 'üë±‚Äç‚ôÇÔ∏è'
    ]
  },
  lugares: {
    name: 'Lugares',
    emojis: [
      'üè∞', 'üèØ', 'üóº', '‚õ™', 'üïå', 'üõï', 'üïç', '‚õ©Ô∏è', 'üèõÔ∏è', 'üóø',
      'üèöÔ∏è', 'üèòÔ∏è', 'üèôÔ∏è', 'üåã', '‚õ∞Ô∏è', 'üèîÔ∏è', 'üóª', 'üèûÔ∏è', 'üèúÔ∏è', 'üèñÔ∏è',
      'üèùÔ∏è', 'üåä', 'üåÖ', 'üåÑ', 'üåÉ', 'üåå', 'üåâ', 'üèüÔ∏è',
      'üèóÔ∏è', 'üß±', 'ü™®', 'ü™µ', 'üèïÔ∏è', 'üõñ', '‚õ∫', 'üåÅ', 'üåÜ', 'üåá',
      'üíí', 'üè©', 'üè®', 'üè¶', 'üè™', 'üè¨', 'üè£', 'üè§', 'üè•', 'üè¢',
      'üè≠', 'üè°', 'üè†', '‚õ≤', 'üå≥', 'üå≤', 'üå¥', 'üåµ', 'üåæ', 'üåø',
      '‚òòÔ∏è', 'üçÄ', 'üçÑ', 'üå∞', 'üåç', 'üåé', 'üåè', 'üåê', 'üó∫Ô∏è', 'üß≠'
    ]
  },
  magia: {
    name: 'Magia',
    emojis: [
      'üîÆ', 'üé±', 'üßø', 'ü™¨', 'üí´', '‚≠ê', 'üåü',
      '‚ú®', '‚ö°', 'üí•', '‚òÑÔ∏è', 'üå†', 'üåà', 'üéÜ', 'üéá',
      'üéÉ', 'üëª', 'üíÄ', '‚ò†Ô∏è', 'üëπ', 'üë∫', 'üòà', 'üëø', 'ü¶Ñ',
      'üêâ', 'üê≤', 'ü™î', 'ü™Ñ', 'üî±', 'üíé', 'üíç', 'üëë',
      '‚ôüÔ∏è', 'üÉè', 'üÄÑ', 'üé¥', 'üß©', 'ü™Ö', 'ü™Ü'
    ]
  },
  naturaleza: {
    name: 'Naturaleza',
    emojis: [
      'üê∫', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üêó', 'ü¶å', 'ü¶è', 'ü¶õ', 'üêò', 'ü¶í',
      'ü¶ò', 'ü¶¨', 'üêÉ', 'üêÇ', 'üêÑ', 'üêé', 'ü¶ì', 'ü¶ç', 'ü¶ß', 'üêÜ',
      'üêÖ', 'ü¶Å', 'üêØ', 'üêà', 'üêà‚Äç‚¨õ', 'ü¶ù', 'ü¶®', 'ü¶°', 'ü¶´', 'ü¶¶',
      'ü¶•', 'üêÅ', 'üêÄ', 'üêøÔ∏è', 'ü¶î', 'üêá', 'üê∞', 'ü¶é', 'üêç', 'üê¢',
      'üêä', 'ü¶ï', 'ü¶ñ', 'ü¶Ç', 'üï∑Ô∏è', 'üï∏Ô∏è', 'üêù', 'ü™≤', 'üêû', 'ü¶ó',
      'ü™∞', 'ü™±', 'ü¶ü', 'ü¶†', 'üêô', 'ü¶ë', 'ü¶Ä', 'ü¶û', 'ü¶ê', 'ü¶™',
      'üêö', 'üê†', 'üêü', 'üê°', 'üêã', 'ü¶à', 'ü¶≠', 'ü¶¢', 'ü¶ö', 'ü¶ú',
      'ü¶©', 'üïäÔ∏è', 'ü¶É', 'ü¶Ü'
    ]
  },
  objetos: {
    name: 'Objetos',
    emojis: [
      '‚öîÔ∏è', 'üó°Ô∏è', 'üõ°Ô∏è', 'üèπ', 'ü™ì', 'üî®', '‚õèÔ∏è', 'ü™ù', 
      'üí£', 'üß®', 'üî•', 'üí∞', 'üíµ', 'ü™ô', 'üé©',
      'üéì', '‚õëÔ∏è', 'ü™ñ', 'üìø', 'üîî', 'üé∫', 'ü•Å', 'ü™ò', 'ü™ï', 'üéª',
      'ü™à', 'üé∏', 'üéπ', 'üéµ', 'üé∂', 'üéº', 'üé§', 'üéß', 'üìª', 'üéÆ',
      'üïπÔ∏è', 'üé∞', 'üé≤', 'üéØ', 'üé≥', 'ü™Ä', 'ü™Å', 'üèÜ', 'üèÖ',
      'ü•á', 'ü•à', 'ü•â', 'üéñÔ∏è', 'üèµÔ∏è', 'üéóÔ∏è', 'üé´', 'üéüÔ∏è', 'üóùÔ∏è', 'üîë',
      'üîê', 'üîí', 'üîì', 'üîè', 'üß∞', 'ü™õ', 'üîß', 'üî©', '‚öôÔ∏è', 'üß≤',
      'üî´', 'üè∫', 'üïØÔ∏è', 'üí°', 'üî¶', 'üèÆ', 'ü™ü', 'ü™ú', 'üßØ',
      'üõ¢Ô∏è', '‚ö±Ô∏è', 'ü™¶', '‚ö∞Ô∏è', 'üö¨', 'üî¨', 'üî≠', 'üì°', 'üíâ', 'ü©∏',
      'üíä', 'ü©π', 'ü©∫', 'üß¨', 'üß™', 'üß´', '‚öóÔ∏è', 'üìú', 'üìã', 'üìä',
      'üìà', 'üìâ', 'üìö', 'üìñ', 'üìï', 'üìó', 'üìò', 'üìô', 'üìì', 'üìî',
      'üìí', 'üìù', '‚úèÔ∏è', '‚úíÔ∏è', 'üñãÔ∏è', 'üñäÔ∏è', 'üñåÔ∏è', 'üñçÔ∏è', 'üé™', 'üé≠', 'üé®', 'üñºÔ∏è'
    ]
  }
}

/**
 * Selector de emojis compacto que se puede integrar al lado de campos
 */
function EmojiSelector({ value, onChange, name, entityType }) {
  const [isOpen, setIsOpen] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState('personas')
  const [dropdownPosition, setDropdownPosition] = useState('bottom')
  const dropdownRef = useRef(null)
  const buttonRef = useRef(null)
  
  // Calcular posici√≥n √≥ptima del dropdown
  const calculateDropdownPosition = () => {
    if (!buttonRef.current) return
    
    const buttonRect = buttonRef.current.getBoundingClientRect()
    const viewport = {
      width: window.innerWidth,
      height: window.innerHeight
    }
    
    // Altura estimada del dropdown
    const dropdownHeight = 500 // altura aproximada del dropdown
    const spaceBelow = viewport.height - buttonRect.bottom
    const spaceAbove = buttonRect.top
    
    // Si hay m√°s espacio arriba y poco espacio abajo, abrir hacia arriba
    if (spaceBelow < dropdownHeight && spaceAbove > spaceBelow) {
      setDropdownPosition('top')
    } else {
      setDropdownPosition('bottom')
    }
  }

  // Cerrar dropdown al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false)
      }
    }

    if (isOpen) {
      calculateDropdownPosition()
      document.addEventListener('mousedown', handleClickOutside)
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [isOpen])

  const handleEmojiSelect = (emoji) => {
    // Simular evento para compatibilidad con DynamicForm
    const event = {
      target: {
        name,
        value: emoji
      }
    }
    onChange(event)
    setIsOpen(false)
  }

  const currentEmoji = value || 'üòÄ'

  return (
    <div className="emoji-selector-container" ref={dropdownRef} style={{ position: 'relative' }}>
      {/* Bot√≥n para abrir el selector */}
      <button
        ref={buttonRef}
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        style={{
          background: 'rgba(31, 41, 55, 0.8)',
          border: '1px solid rgba(107, 114, 128, 0.3)',
          borderRadius: '8px',
          padding: '0.5rem',
          fontSize: '1.25rem',
          cursor: 'pointer',
          transition: 'all 0.2s ease',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          minWidth: '40px',
          height: '40px'
        }}
        onMouseEnter={(e) => {
          e.target.style.background = 'rgba(31, 41, 55, 0.9)'
          e.target.style.borderColor = 'rgba(107, 114, 128, 0.5)'
        }}
        onMouseLeave={(e) => {
          e.target.style.background = 'rgba(31, 41, 55, 0.8)'
          e.target.style.borderColor = 'rgba(107, 114, 128, 0.3)'
        }}
      >
        {currentEmoji}
      </button>

      {/* Dropdown desplegable */}
      {isOpen && (
        <div
          style={{
            position: 'absolute',
            ...(dropdownPosition === 'top' 
              ? { bottom: '100%', marginBottom: '0.5rem' } 
              : { top: '100%', marginTop: '0.5rem' }
            ),
            right: '0', // Alinear a la derecha para evitar salirse del modal
            zIndex: 1000,
            background: 'rgba(31, 41, 55, 0.95)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(107, 114, 128, 0.3)',
            borderRadius: '12px',
            padding: '1rem',
            minWidth: '520px',
            maxWidth: '600px',
            boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)',
            // Asegurar que no se salga del viewport
            transform: 'translateX(-50px)' // Offset hacia la izquierda para evitar desbordamiento
          }}
        >
          {/* Pesta√±as de categor√≠as */}
          <div
            style={{
              display: 'flex',
              gap: '0.25rem',
              marginBottom: '0.75rem',
              padding: '0.25rem',
              background: 'rgba(17, 24, 39, 0.5)',
              borderRadius: '8px',
              overflowX: 'auto'
            }}
          >
            {Object.entries(EMOJI_CATEGORIES).map(([key, category]) => (
              <button
                key={key}
                type="button"
                onClick={() => setSelectedCategory(key)}
                style={{
                  padding: '0.375rem 0.75rem',
                  borderRadius: '6px',
                  fontSize: '0.75rem',
                  fontWeight: '500',
                  whiteSpace: 'nowrap',
                  cursor: 'pointer',
                  border: 'none',
                  transition: 'all 0.15s ease',
                  background: selectedCategory === key ? 'var(--primary)' : 'transparent',
                  color: selectedCategory === key ? 'white' : 'rgba(156, 163, 175, 1)'
                }}
                onMouseEnter={(e) => {
                  if (selectedCategory !== key) {
                    e.target.style.background = 'rgba(139, 92, 246, 0.1)'
                    e.target.style.color = 'rgba(203, 213, 225, 1)'
                  }
                }}
                onMouseLeave={(e) => {
                  if (selectedCategory !== key) {
                    e.target.style.background = 'transparent'
                    e.target.style.color = 'rgba(156, 163, 175, 1)'
                  }
                }}
              >
                {category.name}
              </button>
            ))}
          </div>

          {/* Grid de emojis */}
          <div
            style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(12, 1fr)',
              gap: '0.2rem',
              maxHeight: '400px',
              overflowY: 'auto',
              scrollbarWidth: 'thin',
              scrollbarColor: 'rgba(107, 114, 128, 0.5) transparent'
            }}
          >
            {EMOJI_CATEGORIES[selectedCategory].emojis.map((emoji, idx) => (
              <button
                key={`emoji-${selectedCategory}-${idx}`}
                type="button"
                onClick={() => handleEmojiSelect(emoji)}
                style={{
                  aspectRatio: '1',
                  padding: '0.375rem',
                  borderRadius: '6px',
                  fontSize: '1.25rem',
                  cursor: 'pointer',
                  transition: 'all 0.15s ease',
                  background: 'transparent',
                  border: 'none',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
                onMouseEnter={(e) => {
                  e.target.style.background = 'rgba(139, 92, 246, 0.2)'
                  e.target.style.transform = 'scale(1.1)'
                }}
                onMouseLeave={(e) => {
                  e.target.style.background = 'transparent'
                  e.target.style.transform = 'scale(1)'
                }}
              >
                {emoji}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}

export default React.memo(EmojiSelector)